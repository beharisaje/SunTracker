#include <Wire.h>

// biggest note: needs to start around where lines line up on elevation, and just after a click for azimuth
// because of random changes to mechanics it might nto operate perfectly
// also only run once for now, pretty sure its not actually resting so dont wanna burn out driver


// Quick notes while testing:
// can really increment elevation, especially at start, need big force to lift initially
// can only do elevation directly after a lock of azimuth or else it rotates in that wiggle room for a little


/// ALL OF BELOW CHANGES SLIGHTLY EVERYTIME MECHANICAL SYSTEM CHANGES SLIGHTLY

// ~11300 for full rotation
// ~3300 on way up when starting right on way up
// ~1250 for stop at top
// ~2850 for way down
// ~3900 for pause at bottom

// Should be ~390 per step for azimuth
// 500 azimuth does 1 click after doing elevation, but if following an azimuth turn it does 2 clicks
/// ------------------------------


//####################################################################
//####################     CODE      #################################
//####################################################################


/**
 * Simplified A4988 Stepper Motor Control - 360째 Rotation Both Ways
 * Motor specs: 17HS19-1684S-PG27 Nema 17 with 26.85:1 gearbox
 * Step angle: 0.067째 per step (5373 steps per revolution)
 */


// Pin definitions
const int enPin = 12;      // Enable pin

const int ms1Pin = 11;     // Microstepping control 1
const int ms2Pin = 10;     // Microstepping control 2
const int ms3Pin = 9;      // Microstepping control 3
const int rstPin = 8;      // Reset pin
const int slpPin = 7;      // Sleep pin
const int stepPin = 6;     // Step pin
const int dirPin = 5;      // Direction pin

// Motor parameters for motor :: 0.067째 per step = 5373 steps per revolution
const int stepsPerRevolution = 11290; // however, our system performs different because of gear rations
const int stepDelaySimultaion = 1500;  // Microseconds between steps in simulation mode (speed control)


// function used instead of delay, that allows motor no strain driver during delays
void rest(int ms) {
  digitalWrite(enPin, HIGH); 
  delay(ms);
  digitalWrite(enPin, LOW);   
  delay(2); 
}



void setup() {
  Serial.begin(9600);
  
  // Configure pins as outputs
  pinMode(enPin, OUTPUT);
  pinMode(ms1Pin, OUTPUT);
  pinMode(ms2Pin, OUTPUT);
  pinMode(ms3Pin, OUTPUT);
  pinMode(rstPin, OUTPUT);
  pinMode(slpPin, OUTPUT);
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  
  // Initialize the driver
  digitalWrite(enPin, LOW);    // Enable the driver (active low)
  digitalWrite(rstPin, HIGH);  // Not in reset mode
  digitalWrite(slpPin, HIGH);  // Not in sleep mode
  
  // Set Full step mode for more torque
  digitalWrite(ms1Pin, LOW);
  digitalWrite(ms2Pin, LOW);
  digitalWrite(ms3Pin, LOW);
      
  Serial.println("Simple 360째 Rotation Initialized");
}





void loop() {


  Serial.println("Running Simulation");


  /////////////////////////////////////////
  ///////////Rotate Halfway up and 2 clicks /////////////

  rotateMotor(1250, 1);  
  rest(1000);  

  rotateMotor(510, 0); 
  rest(1000); 

  rotateMotor(500, 0);  
  rest(1000);  // Wait 1 second

  Serial.println("step 1 done");


  ///////////////////////////////////////////
  ////////// Rotate rest of way up and 2 clicks ///////////
  

  rotateMotor(1750, 1);  
  rest(1000);  

  rotateMotor(510, 0);  
  rest(1000);  
  rotateMotor(500, 0);  
  rest(5000);  
  rotateMotor(500, 0);  
  rest(5000);  

  Serial.println("step 2 done");
  ///////////////////////////////////////////
  ////////// Cycle through top delay, and rotate 2 clicks ///////////

  rotateMotor(1800, 1);  // 0 for clockwise
  rest(1000);  // Wait 1 second


  rotateMotor(510, 0);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  rotateMotor(500, 0);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  Serial.println("step 3 done");

  ///////////////////////////////////////////
  ////////// Rotate halfway down and rotate  2 clicks ///////////



  rotateMotor(1500, 1);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  rotateMotor(510, 0);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  rotateMotor(500, 0);  // 0 for clockwise
  rest(1000);  // Wait 1 second


  Serial.println("step 4 done");

  ///////////////////////////////////////////
  ////////// Rotate rest of way down and 2 clicks ///////////

  rotateMotor(1500, 1);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  rotateMotor(510, 0);  // 0 for clockwise
  rest(1000);  // Wait 1 second

  rotateMotor(500, 0);  // 0 for clockwise

  rest(1000);  // Wait 1 second

  Serial.println("step 5 done");


  ///////////////////////////////////////////
  ////////// Rotate through bottom delay and 1 click ///////////


  rotateMotor(4700, 1);  // 0 for clockwise


  delay(5000);  // Wait 1 second


  rotateMotor(510, 0);  // 0 for clockwise

  rest(1000);  // Wait 1 second

  Serial.println("step 6 done");


  ///////////////////////////////////////////
  ////////// Rotate around to starting position ///////////

  rotateMotor(6800, 0);  // 0 for clockwise

  // 30 sec pause
  
  rest(30000);  // Wait 1 second

  Serial.println("back to start");
  

}

void rotateMotor(int steps, int DIR) {
  // Set direction
  if(DIR == 1){
    digitalWrite(dirPin, HIGH);  // Counterclockwise
  }
  else{
    digitalWrite(dirPin, LOW);   // Clockwise
  }

  // Execute steps
  for(int i = 0; i < steps; i++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(stepDelaySimultaion);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(stepDelaySimultaion);
  }
}
